#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform image2D resultImage;

float conv(in float[9] kernel, in float[9] data, in float denom, in float offset) 
{
   float res = 0.0;
   for (int i=0; i<9; ++i) 
   {
      res += kernel[i] * data[i];
   }
   return clamp(res/denom + offset, 0.0, 1.0);
}

struct ImageData 
{
	float avg[9];
} imageData;	


//RANDOM GENERATOR HASHH ________________________________________________________


// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}



// Compound versions of the hashing algorithm I whipped together.
uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }
uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }
uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }



// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}



// Pseudo-random value in half-open range [0:1].
float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }
float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }





void main()
{	
	// Fetch neighbouring texels
	int n = -1;
	for (int i=-1; i<2; ++i) 
	{   
		for(int j=-1; j<2; ++j) 
		{    
			n++;    
			vec3 rgb = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x + i, gl_GlobalInvocationID.y + j)).rgb;
			imageData.avg[n] = (rgb.r + rgb.g + rgb.b) / 3.0;
		}
	}

	float[9] kernel;
	kernel[0] = 0.0;		 kernel[1] =  random(0.4);	kernel[2] = 0.0;
	kernel[3] = -1.0;		 kernel[4] = -1.0;			kernel[5] = 2.0;
	kernel[6] = 0.0;		 kernel[7] =  0.0;			kernel[8] = 0.0;
									
	vec4 res = vec4(vec3(conv(kernel, imageData.avg, 1.0, 0.50)), 1.0);
	res.a -= 0.01f; 

	//vec4 res2 = vec4(rgb, 1.0);


	vec3 rgb2 = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).rgb;

	if (rgb2.b > 0.6) rgb2.b = 0.01;
	if (rgb2.b < 0.6) rgb2.b += 0.01;
	vec4 rgba2 = vec4(rgb2, 1.0);

	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), rgba2);





}


void Nmain()
{	
	// Fetch neighbouring texels
	int n = -1;
	for (int i=-1; i<2; ++i) 
	{   
		for(int j=-1; j<2; ++j) 
		{    
			n++;    
			vec3 rgb = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x + i, gl_GlobalInvocationID.y + j)).rgb;
			imageData.avg[n] = (rgb.r + rgb.g + rgb.b) / 3.0;
		}
	}

	float[9] kernel;
	kernel[0] = -1.0; kernel[1] =  0.0; kernel[2] =  0.0;
	kernel[3] = 0.0; kernel[4] = -1.0; kernel[5] =  0.0;
	kernel[6] = 0.0; kernel[7] =  0.0; kernel[8] = 2.0;
									
	vec4 res = vec4(vec3(conv(kernel, imageData.avg, 1.0, 0.50)), 1.0);

	imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), res);





}




